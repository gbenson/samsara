#!/usr/bin/env python

### Preamble: allow this program to be run without PYTHON_PATH abuse
import sys, os
samsara_dir = os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))
if samsara_dir not in sys.path:
    sys.path.insert(0, samsara_dir)
### end of preamble

from samsara.httpserver import HTTPServer
from samsara.server import SamsaraServer
import atexit
import glob
import signal
import socket

hostname = socket.gethostbyaddr(socket.gethostname())[0]
if hostname == "blade.nx":
    host = ""
else:
    host = "127.0.0.1"

roots = sys.argv[1:]
if not roots:
    print >>sys.stderr, "usage: %s ROOT..."
    sys.exit(1)
if len(roots) == 1:
    paths = glob.glob(os.path.join(roots[0], "*", "[Ss]amsara"))
    if paths:
        roots = map(os.path.dirname, paths)

def lock_logfile(path):
    atexit.register(os.unlink, path)
    os.close(os.open(path, os.O_WRONLY | os.O_CREAT | os.O_EXCL, 0600))

def capture_output(path):
    fd = os.open(path, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0600)
    for fp in sys.stdout, sys.stderr:
        fp.flush()
        os.dup2(fd, fp.fileno())
    # Disable stdout buffering
    sys.stdout = os.fdopen(sys.stdout.fileno(), "w", 0)

# Do as much setup as we can outside the forking part
servers = [HTTPServer((host,
                       int(server.config.get("httpserver", "port"))),
                      server) for server in map(SamsaraServer, roots)]
for server in servers:
    if not os.path.exists(server.samsara.data):
        os.makedirs(server.samsara.data)

for server in servers:
    if os.fork():
        continue
    os.setsid()
    if os.fork():
        os._exit(0)
    signal.signal(signal.SIGTERM, sys.exit)
    lock_logfile(os.path.join(server.samsara.data, "lock"))
    capture_output(os.path.join(server.samsara.data, "log"))
    print "Serving on", server.server_address
    server.serve_forever()
os._exit(0)
